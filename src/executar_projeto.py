"""
EXECUTAR PROJETO COMPLETO - Crimes Cibern√©ticos no Brasil
==========================================================

Este script executa todo o projeto de uma vez s√≥, incluindo:
1. Coleta de dados da SaferNet e G1
2. An√°lise dos dados coletados  
3. Gera√ß√£o de gr√°ficos e visualiza√ß√µes
4. Relat√≥rio final

Autor: Projeto Crimes Cibern√©ticos
Data: 2025-06-21
Vers√£o: 1.0 - Para Mac com VS Code

COMO USAR:
1. Abra o Terminal no VS Code (Terminal > New Terminal)
2. Navegue at√© a pasta do projeto: cd /caminho/para/projeto_crimes_ciberneticos
3. Execute: python executar_projeto.py
4. Aguarde a conclus√£o (aproximadamente 5 minutos)
"""

import subprocess
import sys
import os
import time
from datetime import datetime

def print_header(title):
    """
    Fun√ß√£o para imprimir cabe√ßalhos bonitos
    """
    print("\n" + "=" * 60)
    print(f"üöÄ {title}")
    print("=" * 60)

def print_step(step_number, description):
    """
    Fun√ß√£o para imprimir cada passo do processo
    """
    print(f"\n{step_number}Ô∏è‚É£ {description}")
    print("-" * 50)

def check_python_version():
    """
    Verifica se a vers√£o do Python √© adequada
    """
    print("üîç Verificando vers√£o do Python...")
    
    # Obter vers√£o do Python
    python_version = sys.version_info
    print(f"   Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Verificar se √© Python 3.6 ou superior
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 6):
        print("‚ùå ERRO: Python 3.6 ou superior √© necess√°rio")
        print("   Por favor, atualize sua vers√£o do Python")
        return False
    
    print("‚úÖ Vers√£o do Python adequada")
    return True

def check_dependencies():
    """
    Verifica se todas as depend√™ncias est√£o instaladas
    """
    print("\nüîç Verificando depend√™ncias...")
    
    # Lista de depend√™ncias necess√°rias
    required_packages = [
        'pandas',
        'matplotlib', 
        'seaborn',
        'requests',
        'beautifulsoup4',
        'plotly',
        'numpy'
    ]
    
    missing_packages = []
    
    # Verificar cada pacote
    for package in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - N√ÉO INSTALADO")
            missing_packages.append(package)
    
    # Se h√° pacotes faltando, tentar instalar
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Encontrados {len(missing_packages)} pacotes n√£o instalados")
        print("üîß Tentando instalar automaticamente...")
        
        for package in missing_packages:
            try:
                print(f"   üì¶ Instalando {package}...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                print(f"   ‚úÖ {package} instalado com sucesso")
            except subprocess.CalledProcessError:
                print(f"   ‚ùå Falha ao instalar {package}")
                print(f"   üí° Tente instalar manualmente: pip install {package}")
                return False
    
    print("‚úÖ Todas as depend√™ncias est√£o dispon√≠veis")
    return True

def create_directory_structure():
    """
    Cria a estrutura de diret√≥rios necess√°ria
    """
    print("\nüìÅ Criando estrutura de diret√≥rios...")
    
    # Lista de diret√≥rios necess√°rios
    directories = [
        "data/raw",
        "data/processed", 
        "data/external",
        "docs/visualizations",
        "src/scrapers",
        "src/analysis",
        "src/visualization"
    ]
    
    # Criar cada diret√≥rio
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"   ‚úÖ {directory}")
        except Exception as e:
            print(f"   ‚ùå Erro ao criar {directory}: {e}")
            return False
    
    print("‚úÖ Estrutura de diret√≥rios criada")
    return True

def run_data_collection():
    """
    Executa a coleta de dados
    """
    print_step(1, "COLETA DE DADOS")
    print("üìä Coletando dados da SaferNet Brasil e G1...")
    print("‚è±Ô∏è  Tempo estimado: 2-3 minutos")
    
    try:
        # Verificar se o script existe
        script_path = "src/run_scrapers.py"
        if not os.path.exists(script_path):
            print(f"‚ùå Script n√£o encontrado: {script_path}")
            print("üí° Certifique-se de que todos os arquivos do projeto est√£o na pasta correta")
            return False
        
        # Executar script de coleta
        print("üîÑ Executando coleta...")
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, text=True, timeout=300)
        
        # Verificar resultado
        if result.returncode == 0:
            print("‚úÖ Coleta de dados conclu√≠da com sucesso!")
            
            # Mostrar estat√≠sticas b√°sicas
            lines = result.stdout.split('\n')
            for line in lines:
                if 'Total de registros coletados:' in line:
                    print(f"   üìä {line.strip()}")
                elif 'SaferNet:' in line and 'registros' in line:
                    print(f"   üìà {line.strip()}")
                elif 'G1:' in line and 'not√≠cias' in line:
                    print(f"   üì∞ {line.strip()}")
            
            return True
        else:
            print("‚ùå Erro na coleta de dados")
            print("üìã Detalhes do erro:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout na coleta de dados (mais de 5 minutos)")
        print("üí° Tente executar novamente ou verifique sua conex√£o com a internet")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado na coleta: {e}")
        return False

def run_data_analysis():
    """
    Executa a an√°lise dos dados
    """
    print_step(2, "AN√ÅLISE DOS DADOS")
    print("üîç Analisando tend√™ncias e padr√µes nos dados...")
    print("‚è±Ô∏è  Tempo estimado: 30 segundos")
    
    try:
        # Verificar se o script existe
        script_path = "src/analysis/data_analysis.py"
        if not os.path.exists(script_path):
            print(f"‚ùå Script n√£o encontrado: {script_path}")
            return False
        
        # Executar an√°lise
        print("üîÑ Executando an√°lise...")
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, text=True, timeout=120)
        
        # Verificar resultado
        if result.returncode == 0:
            print("‚úÖ An√°lise de dados conclu√≠da com sucesso!")
            
            # Mostrar insights principais
            lines = result.stdout.split('\n')
            print("üéØ Principais descobertas:")
            for line in lines:
                if 'Crescimento m√©dio anual' in line:
                    print(f"   üìà {line.strip()}")
                elif 'Taxa m√©dia de remo√ß√£o' in line:
                    print(f"   üõ°Ô∏è  {line.strip()}")
                elif 'Crime mais denunciado' in line:
                    print(f"   ‚ö†Ô∏è  {line.strip()}")
            
            return True
        else:
            print("‚ùå Erro na an√°lise de dados")
            print("üìã Detalhes do erro:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout na an√°lise (mais de 2 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado na an√°lise: {e}")
        return False

def run_visualizations():
    """
    Executa a gera√ß√£o de visualiza√ß√µes
    """
    print_step(3, "GERA√á√ÉO DE VISUALIZA√á√ïES")
    print("üìä Criando gr√°ficos e dashboards...")
    print("‚è±Ô∏è  Tempo estimado: 1-2 minutos")
    
    try:
        # Verificar se o script existe
        script_path = "src/analysis/create_charts.py"
        if not os.path.exists(script_path):
            print(f"‚ùå Script n√£o encontrado: {script_path}")
            return False
        
        # Executar visualiza√ß√µes
        print("üîÑ Executando gera√ß√£o de gr√°ficos...")
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, text=True, timeout=180)
        
        # Verificar resultado
        if result.returncode == 0:
            print("‚úÖ Visualiza√ß√µes criadas com sucesso!")
            
            # Mostrar arquivos gerados
            lines = result.stdout.split('\n')
            print("üìä Arquivos gerados:")
            for line in lines:
                if 'Gr√°fico salvo:' in line or 'Dashboard salvo:' in line:
                    filename = line.split('/')[-1] if '/' in line else line.split('\\')[-1]
                    print(f"   üìà {filename}")
            
            return True
        else:
            print("‚ùå Erro na gera√ß√£o de visualiza√ß√µes")
            print("üìã Detalhes do erro:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout na gera√ß√£o de visualiza√ß√µes (mais de 3 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado nas visualiza√ß√µes: {e}")
        return False

def check_results():
    """
    Verifica se todos os arquivos foram gerados corretamente
    """
    print_step(4, "VERIFICA√á√ÉO DOS RESULTADOS")
    print("üîç Verificando se todos os arquivos foram gerados...")
    
    # Lista de arquivos que devem existir
    expected_files = [
        "data/raw/safernet_data.csv",
        "data/raw/g1_news.csv", 
        "data/raw/relatorio_coleta.md",
        "data/processed/yearly_trends.csv",
        "data/processed/crime_types.csv",
        "data/processed/insights.txt",
        "docs/visualizations/evolucao_temporal.png",
        "docs/visualizations/distribuicao_crimes.png",
        "docs/visualizations/dashboard_interativo.html"
    ]
    
    missing_files = []
    existing_files = []
    
    # Verificar cada arquivo
    for file_path in expected_files:
        if os.path.exists(file_path):
            existing_files.append(file_path)
            print(f"   ‚úÖ {file_path}")
        else:
            missing_files.append(file_path)
            print(f"   ‚ùå {file_path} - N√ÉO ENCONTRADO")
    
    # Resumo
    print(f"\nüìä Resumo da verifica√ß√£o:")
    print(f"   ‚úÖ Arquivos encontrados: {len(existing_files)}")
    print(f"   ‚ùå Arquivos faltando: {len(missing_files)}")
    
    if len(missing_files) == 0:
        print("üéâ Todos os arquivos foram gerados com sucesso!")
        return True
    else:
        print("‚ö†Ô∏è  Alguns arquivos n√£o foram gerados")
        print("üí° Verifique os erros nas etapas anteriores")
        return False

def show_final_summary():
    """
    Mostra resumo final e pr√≥ximos passos
    """
    print_header("PROJETO CONCLU√çDO COM SUCESSO!")
    
    print("üéØ O que foi realizado:")
    print("   ‚úÖ Coleta autom√°tica de dados sobre crimes cibern√©ticos")
    print("   ‚úÖ An√°lise estat√≠stica completa dos dados")
    print("   ‚úÖ Gera√ß√£o de gr√°ficos e visualiza√ß√µes profissionais")
    print("   ‚úÖ Cria√ß√£o de dashboard interativo")
    
    print("\nüìÅ Arquivos principais gerados:")
    print("   üìä docs/visualizations/ - Todos os gr√°ficos para apresenta√ß√£o")
    print("   üìà data/processed/ - Dados analisados em CSV")
    print("   üìã data/raw/relatorio_coleta.md - Relat√≥rio da coleta")
    
    print("\nüéØ Pr√≥ximos passos para sua entrega:")
    print("   1. üìñ Leia o arquivo docs/GUIA_COMPLETO.pdf")
    print("   2. üìä Use os gr√°ficos em docs/visualizations/ na apresenta√ß√£o")
    print("   3. üìù Consulte docs/relatorio_final.pdf para o relat√≥rio")
    print("   4. üíª Abra dashboard_interativo.html no navegador")
    
    print("\nüí° Dicas importantes:")
    print("   ‚Ä¢ Todos os scripts est√£o sem extens√£o '_fixed'")
    print("   ‚Ä¢ Todos os dados s√£o simulados mas baseados em padr√µes reais")
    print("   ‚Ä¢ O projeto est√° completo e pronto para entrega!")
    
    print(f"\n‚è∞ Projeto executado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print("üéâ Parab√©ns! Seu projeto est√° pronto!")

def main():
    """
    Fun√ß√£o principal que executa todo o projeto
    """
    # Cabe√ßalho inicial
    print_header("EXECUTANDO PROJETO COMPLETO")
    print("üéØ Projeto: Evolu√ß√£o de Crimes Cibern√©ticos no Brasil (2006-2024)")
    print("‚è±Ô∏è  Tempo total estimado: 5-7 minutos")
    print("üíª Sistema: Mac com VS Code")
    
    # Registrar hora de in√≠cio
    start_time = time.time()
    
    # Etapa 0: Verifica√ß√µes iniciais
    print_header("VERIFICA√á√ïES INICIAIS")
    
    if not check_python_version():
        print("‚ùå Falha na verifica√ß√£o do Python. Abortando...")
        return False
    
    if not check_dependencies():
        print("‚ùå Falha na verifica√ß√£o de depend√™ncias. Abortando...")
        return False
    
    if not create_directory_structure():
        print("‚ùå Falha na cria√ß√£o de diret√≥rios. Abortando...")
        return False
    
    print("‚úÖ Todas as verifica√ß√µes iniciais passaram!")
    
    # Etapa 1: Coleta de dados
    if not run_data_collection():
        print("‚ùå Falha na coleta de dados. Abortando...")
        return False
    
    # Etapa 2: An√°lise de dados  
    if not run_data_analysis():
        print("‚ùå Falha na an√°lise de dados. Abortando...")
        return False
    
    # Etapa 3: Visualiza√ß√µes
    if not run_visualizations():
        print("‚ùå Falha na gera√ß√£o de visualiza√ß√µes. Abortando...")
        return False
    
    # Etapa 4: Verifica√ß√£o final
    if not check_results():
        print("‚ö†Ô∏è  Projeto conclu√≠do com alguns problemas")
        return False
    
    # Calcular tempo total
    end_time = time.time()
    total_time = end_time - start_time
    minutes = int(total_time // 60)
    seconds = int(total_time % 60)
    
    # Resumo final
    show_final_summary()
    print(f"\n‚è±Ô∏è  Tempo total de execu√ß√£o: {minutes}m {seconds}s")
    
    return True

# Executar apenas se o script for chamado diretamente
if __name__ == "__main__":
    """
    Ponto de entrada do programa
    
    Este bloco s√≥ executa quando o arquivo √© executado diretamente,
    n√£o quando √© importado como m√≥dulo.
    """
    try:
        # Executar projeto completo
        success = main()
        
        # C√≥digo de sa√≠da
        if success:
            print("\nüéâ EXECU√á√ÉO CONCLU√çDA COM SUCESSO!")
            sys.exit(0)  # C√≥digo 0 = sucesso
        else:
            print("\n‚ùå EXECU√á√ÉO FALHOU!")
            print("üí° Verifique os erros acima e tente novamente")
            sys.exit(1)  # C√≥digo 1 = erro
            
    except KeyboardInterrupt:
        # Usu√°rio pressionou Ctrl+C
        print("\n\n‚ö†Ô∏è  Execu√ß√£o interrompida pelo usu√°rio")
        print("üí° Para executar novamente: python executar_projeto.py")
        sys.exit(2)  # C√≥digo 2 = interrompido
        
    except Exception as e:
        # Erro inesperado
        print(f"\n\n‚ùå ERRO INESPERADO: {e}")
        print("üí° Tente executar novamente ou verifique os logs acima")
        sys.exit(3)  # C√≥digo 3 = erro inesperado

